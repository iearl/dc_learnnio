NIO Buffer:
    定义：缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。
    读写数据步骤：
        写入数据到Buffer
        调用flip()方法
        从Buffer中读取数据
        调用clear()方法或者compact()方法
    写：buffer写入数据时，buffer会记录下写了多少数据。
    读：需要通过flip()方法将Buffer从写模式切换到读模式。在读模式下，可以读取之前写入到buffer的所有数据。
    读完之后需要清空缓冲区，以便再次写入数据：
        调用clear()或compact()方法。clear()方法会清空整个缓冲区。
        compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。
Buffer的工作原理
    capacity：在读/写模式下都是固定的，就是我们分配的缓冲大小（容量）。
              一旦Buffer满了，需要将其清空（通过读数据或者清除数据）才能继续写数据往里写数据。
    position：类似于读/写指针，表示当前读(写)到什么位置。
              写最大值：position最大可为capacity – 1。
              读最大值：position是0。
    limit：写模式下，limit等于Buffer的capacity。
           读模式下，写模式下的position值。
Buffer的类型
Java NIO 有以下Buffer类型：通过char，short，int，long，float 或 double类型来操作缓冲区中的字节。
    ByteBuffer
    MappedByteBuffer
    CharBuffer
    DoubleBuffer
    FloatBuffer
    IntBuffer
    LongBuffer
    ShortBuffer
Buffer的分配：
    XxxBuffer.allocate(分配大小，字节);
    例如： ByteBuffer.allocate(48);、CharBuffer.allocate(1024);
Buffer中写数据：
    从Channel写到Buffer。inChannel.read(buf);
    通过Buffer的put()方法写到Buffer里。 buf.put(127);put有很多重载方法。
Buffer中读取数据：
    从Buffer读取数据到Channel。 inChannel.write(buf);
    使用get()方法从Buffer中读取数据。buf.get(); get有很多重载方法。
flip()方法：
    flip方法将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。
rewind()方法：
    Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。
    limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。
clear()方法：
    调用的是clear()方法，position将被设回0，limit被设置成 capacity的值。
    Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。
    如果Buffer中有一些未读的数据，调用clear()方法，数据将“被遗忘”，意味着不再有任何标记会告诉你哪些数据被读过，哪些还没有。
compact()方法：只会累计没有写过的数据
    compact()方法将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。
    limit属性依然像clear()方法一样，设置成capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。
mark()与reset()方法：
    通过调用Buffer.mark()方法，可以标记Buffer中的一个特定position。
    通过调用Buffer.reset()方法恢复到这个position。
equals()方法：
  当满足下列条件时，表示两个Buffer相等：
    有相同的类型（byte、char、int等）。
    Buffer中剩余的byte、char等的个数相等。
    Buffer中所有剩余的byte、char等都相同。
  比较Buffer中的剩余元素。
compareTo()方法：
    第一个不相等的元素小于另一个Buffer中对应的元素 。
    所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。
  比较Buffer中的剩余元素。



